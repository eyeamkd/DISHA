// import * as firebase from 'firebase/app';
// import '@firebase/messaging';

// const messaging = firebase.messaging;

// export const getToken = () => messaging.getToken().then(token=> console.log("Token is",token));

// Set this to true for production
// import {checkNotificationPermission} from '../src/services/Notificaitons/notification';
importScripts("https://www.gstatic.com/firebasejs/8.2.4/firebase-app.js");
importScripts("https://www.gstatic.com/firebasejs/8.2.4/firebase-messaging.js");


firebase.initializeApp({
  apiKey: "AIzaSyCVIkPdpiuZfVo3YHaYzo21KneKEWSnSGc",
  authDomain: "disha-testing.firebaseapp.com",
  databaseURL: "https://disha-testing.firebaseio.com",
  projectId: "disha-testing",
  storageBucket: "disha-testing.appspot.com",
  messagingSenderId: "1056813579592",
  appId: "1:1056813579592:web:d4f732c25cee4bffaf877d",
  measurementId: "G-2D0X4TQQ2B",
});

const messaging = firebase.messaging();

var doCache = true;

// Name our cache
var CACHE_NAME = "disha-cache-v1";

// Delete old caches that are not our current one!
self.addEventListener("activate", (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((keyList) =>
      Promise.all(
        keyList.map((key) => {
          if (!cacheWhitelist.includes(key)) {
            console.log("Deleting cache: " + key);
            return caches.delete(key);
          }
        })
      )
    )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener("install", function (event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME).then(function (cache) {
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch("asset-manifest.json")
          .then((response) => {
            response.json();
          })
          .then((assets) => {
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            const urlsToCache = ["/", assets["main.js"]];
            cache.addAll(urlsToCache);
            console.log("cached");
          });
      })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener("fetch", function (event) {
  if (doCache) {
    event.respondWith(
      caches.match(event.request).then(function (response) {
        return response || fetch(event.request);
      })
    );
  }
});

// messaging.setBackgroundMessageHandler((payload) => {
//   const title = payload.data.title;
//   const options = {
//     body: payload.data.score,
//   };
//   return self.registration.showNotification(title, options);
// }); 

messaging.onBackgroundMessage(function(payload) {
    console.log('[firebase-messaging-sw.js] Received background message ', payload);
    // Customize notification here
    const notificationTitle = 'Background Message Title';
    const notificationOptions = {
      body: 'Background Message body.',
      icon: './logo192.png'
    };
  
    self.registration.showNotification(notificationTitle,
      notificationOptions);
  });

console.log("Service Worker is executing...");

// const requestPermission = () => {
//   console.log(Notification);
//   Notification.requestPermission()
//   .then(permission => console.log(permission))
//   .catch(err=> console.log(err));

// }

// requestPermission();

// self.addEventListener("push", function (event) {
//   console.log("Push triggered");
//   var title = "Notification from the server";
//   var message = "Your friend Kaustubh has joined DISHA";
//   var icon = "./logo192.png";
//   console.log(event);
//   const options = {
//     body: message,
//     icon: icon,
//   };

//   self.registration.showNotification(title, options);
// });

// self.addEventListener("push", function(event) {
//   if (event.data) {
//     console.log("Push event!! ", event.data.text());
//     showLocalNotification("Yolo", event.data.text(),  self.registration);
//   } else {
//     console.log("Push event but no data");
//   }
// });
// const showLocalNotification = (title, body, swRegistration) => {
//   const options = {
//     body
//     // here you can add more properties like icon, image, vibrate, etc.
//   };
//   swRegistration.showNotification(title, options);
// };
